name: Security & Quality Analysis

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write

jobs:
  security-analysis:
    name: Security & Vulnerability Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # Análise de vulnerabilidades em dependências
    - name: Run npm audit
      id: npm-audit
      run: |
        echo "## 🔍 NPM Audit Results" >> audit_results.md
        if npm audit --audit-level=moderate --json > npm_audit.json 2>&1; then
          echo "✅ No vulnerabilities found in dependencies" >> audit_results.md
          echo "has_vulnerabilities=false" >> $GITHUB_OUTPUT
        else
          echo "❌ Vulnerabilities found in dependencies:" >> audit_results.md
          echo "\`\`\`json" >> audit_results.md
          cat npm_audit.json >> audit_results.md
          echo "\`\`\`" >> audit_results.md
          echo "has_vulnerabilities=true" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    # Análise estática de código com ESLint
    - name: Run ESLint Security Analysis
      id: eslint
      run: |
        echo "## 🔒 ESLint Security Analysis" >> eslint_results.md
        npx eslint . --ext .ts,.js,.html --format json --output-file eslint_report.json || true
        
        if [ -s eslint_report.json ]; then
          ISSUES_COUNT=$(cat eslint_report.json | jq '[.[].messages[]] | length')
          if [ "$ISSUES_COUNT" -gt 0 ]; then
            echo "❌ Found $ISSUES_COUNT potential security/quality issues:" >> eslint_results.md
            echo "\`\`\`json" >> eslint_results.md
            cat eslint_report.json | jq '.' >> eslint_results.md
            echo "\`\`\`" >> eslint_results.md
            echo "has_issues=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No ESLint issues found" >> eslint_results.md
            echo "has_issues=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "✅ No ESLint issues found" >> eslint_results.md
          echo "has_issues=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    # Análise de segurança com Semgrep
    - name: Run Semgrep Security Scan
      id: semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/typescript
          p/angular
        generateSarif: "1"
        publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
      continue-on-error: true

    # Análise de secrets/credenciais
    - name: Run TruffleHog Secrets Scan
      id: trufflehog
      run: |
        echo "## 🔐 Secrets Scan Results" >> secrets_results.md
        docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest filesystem /pwd --json > trufflehog_results.json || true
        
        if [ -s trufflehog_results.json ]; then
          SECRETS_COUNT=$(cat trufflehog_results.json | jq -s 'length')
          if [ "$SECRETS_COUNT" -gt 0 ]; then
            echo "❌ Found $SECRETS_COUNT potential secrets/credentials:" >> secrets_results.md
            echo "\`\`\`json" >> secrets_results.md
            cat trufflehog_results.json | jq '.' >> secrets_results.md
            echo "\`\`\`" >> secrets_results.md
            echo "has_secrets=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No secrets found" >> secrets_results.md
            echo "has_secrets=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "✅ No secrets found" >> secrets_results.md
          echo "has_secrets=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    # Análise específica de Angular/TypeScript
    - name: Angular Security Analysis
      id: angular-security
      run: |
        echo "## 🅰️ Angular Security Analysis" >> angular_results.md
        
        # Verifica uso de innerHTML sem sanitização
        echo "### innerHTML Usage Check" >> angular_results.md
        INNER_HTML_ISSUES=$(grep -r "innerHTML" src/ --include="*.ts" --include="*.html" || true)
        if [ -n "$INNER_HTML_ISSUES" ]; then
          echo "⚠️ Potential XSS vulnerabilities found with innerHTML usage:" >> angular_results.md
          echo "\`\`\`" >> angular_results.md
          echo "$INNER_HTML_ISSUES" >> angular_results.md
          echo "\`\`\`" >> angular_results.md
        else
          echo "✅ No unsafe innerHTML usage found" >> angular_results.md
        fi
        
        # Verifica bypass de sanitização
        echo "### Sanitization Bypass Check" >> angular_results.md
        BYPASS_ISSUES=$(grep -r "bypassSecurityTrust" src/ --include="*.ts" || true)
        if [ -n "$BYPASS_ISSUES" ]; then
          echo "⚠️ Security bypass methods found:" >> angular_results.md
          echo "\`\`\`" >> angular_results.md
          echo "$BYPASS_ISSUES" >> angular_results.md
          echo "\`\`\`" >> angular_results.md
        else
          echo "✅ No security bypass methods found" >> angular_results.md
        fi
        
        # Verifica eval() usage
        echo "### Eval Usage Check" >> angular_results.md
        EVAL_ISSUES=$(grep -r "eval(" src/ --include="*.ts" --include="*.js" || true)
        if [ -n "$EVAL_ISSUES" ]; then
          echo "❌ Dangerous eval() usage found:" >> angular_results.md
          echo "\`\`\`" >> angular_results.md
          echo "$EVAL_ISSUES" >> angular_results.md
          echo "\`\`\`" >> angular_results.md
          echo "has_critical_issues=true" >> $GITHUB_OUTPUT
        else
          echo "✅ No eval() usage found" >> angular_results.md
        fi
        
        # Verifica hardcoded URLs/endpoints
        echo "### Hardcoded URLs Check" >> angular_results.md
        HARDCODED_URLS=$(grep -rE "http[s]?://[^'\"\s]+" src/ --include="*.ts" --include="*.html" || true)
        if [ -n "$HARDCODED_URLS" ]; then
          echo "⚠️ Hardcoded URLs found (potential security risk):" >> angular_results.md
          echo "\`\`\`" >> angular_results.md
          echo "$HARDCODED_URLS" >> angular_results.md
          echo "\`\`\`" >> angular_results.md
        else
          echo "✅ No hardcoded URLs found" >> angular_results.md
        fi

    # Análise de configurações de segurança
    - name: Security Configuration Analysis
      id: security-config
      run: |
        echo "## ⚙️ Security Configuration Analysis" >> config_results.md
        
        # Verifica configurações do Angular
        echo "### Angular Configuration" >> config_results.md
        if [ -f "angular.json" ]; then
          # Verifica se source maps estão desabilitados em produção
          SOURCE_MAPS=$(cat angular.json | jq -r '.projects[].architect.build.configurations.production.sourceMap // empty')
          if [ "$SOURCE_MAPS" = "true" ]; then
            echo "⚠️ Source maps enabled in production (information disclosure risk)" >> config_results.md
          else
            echo "✅ Source maps properly configured for production" >> config_results.md
          fi
          
          # Verifica otimizações de build
          OPTIMIZATION=$(cat angular.json | jq -r '.projects[].architect.build.configurations.production.optimization // empty')
          if [ "$OPTIMIZATION" = "false" ]; then
            echo "⚠️ Build optimization disabled in production" >> config_results.md
          else
            echo "✅ Build optimization enabled for production" >> config_results.md
          fi
        fi
        
        # Verifica configurações do TypeScript
        echo "### TypeScript Configuration" >> config_results.md
        if [ -f "tsconfig.json" ]; then
          STRICT_MODE=$(cat tsconfig.json | jq -r '.compilerOptions.strict // empty')
          if [ "$STRICT_MODE" != "true" ]; then
            echo "⚠️ TypeScript strict mode not enabled (potential type safety issues)" >> config_results.md
          else
            echo "✅ TypeScript strict mode enabled" >> config_results.md
          fi
        fi

    # Compilar e verificar build
    - name: Test Build Process
      id: build-test
      run: |
        echo "## 🏗️ Build Process Analysis" >> build_results.md
        
        if ng build --configuration=production 2>&1 | tee build_output.log; then
          echo "✅ Production build successful" >> build_results.md
          
          # Verifica warnings no build
          if grep -i "warning" build_output.log; then
            echo "⚠️ Build warnings found:" >> build_results.md
            echo "\`\`\`" >> build_results.md
            grep -i "warning" build_output.log >> build_results.md
            echo "\`\`\`" >> build_results.md
          fi
        else
          echo "❌ Production build failed" >> build_results.md
          echo "\`\`\`" >> build_results.md
          cat build_output.log >> build_results.md
          echo "\`\`\`" >> build_results.md
          echo "build_failed=true" >> $GITHUB_OUTPUT
        fi

    # Consolidar resultados
    - name: Consolidate Security Report
      id: consolidate
      run: |
        echo "# 🛡️ Security Analysis Report" > final_report.md
        echo "" >> final_report.md
        echo "## Summary" >> final_report.md
        
        CRITICAL_ISSUES=false
        HIGH_ISSUES=false
        MEDIUM_ISSUES=false
        
        # Processar resultados de cada análise
        if [ "${{ steps.npm-audit.outputs.has_vulnerabilities }}" = "true" ]; then
          HIGH_ISSUES=true
          echo "- ❌ **Dependency vulnerabilities found**" >> final_report.md
        else
          echo "- ✅ **No dependency vulnerabilities**" >> final_report.md
        fi
        
        if [ "${{ steps.eslint.outputs.has_issues }}" = "true" ]; then
          MEDIUM_ISSUES=true
          echo "- ⚠️ **Code quality issues found**" >> final_report.md
        else
          echo "- ✅ **No code quality issues**" >> final_report.md
        fi
        
        if [ "${{ steps.trufflehog.outputs.has_secrets }}" = "true" ]; then
          CRITICAL_ISSUES=true
          echo "- ❌ **Secrets/credentials found**" >> final_report.md
        else
          echo "- ✅ **No secrets detected**" >> final_report.md
        fi
        
        if [ "${{ steps.angular-security.outputs.has_critical_issues }}" = "true" ]; then
          CRITICAL_ISSUES=true
          echo "- ❌ **Critical security issues in Angular code**" >> final_report.md
        else
          echo "- ✅ **No critical Angular security issues**" >> final_report.md
        fi
        
        if [ "${{ steps.build-test.outputs.build_failed }}" = "true" ]; then
          HIGH_ISSUES=true
          echo "- ❌ **Production build failed**" >> final_report.md
        else
          echo "- ✅ **Production build successful**" >> final_report.md
        fi
        
        echo "" >> final_report.md
        
        # Adicionar detalhes de cada análise
        [ -f audit_results.md ] && cat audit_results.md >> final_report.md && echo "" >> final_report.md
        [ -f eslint_results.md ] && cat eslint_results.md >> final_report.md && echo "" >> final_report.md
        [ -f secrets_results.md ] && cat secrets_results.md >> final_report.md && echo "" >> final_report.md
        [ -f angular_results.md ] && cat angular_results.md >> final_report.md && echo "" >> final_report.md
        [ -f config_results.md ] && cat config_results.md >> final_report.md && echo "" >> final_report.md
        [ -f build_results.md ] && cat build_results.md >> final_report.md && echo "" >> final_report.md
        
        # Determinar status final
        if [ "$CRITICAL_ISSUES" = "true" ]; then
          echo "status=critical" >> $GITHUB_OUTPUT
          echo "" >> final_report.md
          echo "## ⛔ CRITICAL SECURITY ISSUES FOUND" >> final_report.md
          echo "**Action Required**: These issues must be resolved before merging." >> final_report.md
        elif [ "$HIGH_ISSUES" = "true" ]; then
          echo "status=high" >> $GITHUB_OUTPUT
          echo "" >> final_report.md
          echo "## ⚠️ HIGH PRIORITY ISSUES FOUND" >> final_report.md
          echo "**Recommendation**: Review and resolve these issues before merging." >> final_report.md
        elif [ "$MEDIUM_ISSUES" = "true" ]; then
          echo "status=medium" >> $GITHUB_OUTPUT
          echo "" >> final_report.md
          echo "## 📋 MEDIUM PRIORITY ISSUES FOUND" >> final_report.md
          echo "**Suggestion**: Consider addressing these issues to improve code quality." >> final_report.md
        else
          echo "status=clean" >> $GITHUB_OUTPUT
          echo "" >> final_report.md
          echo "## ✅ NO SECURITY ISSUES FOUND" >> final_report.md
          echo "**Status**: Code is ready for merge." >> final_report.md
        fi

    # Comentar no PR com os resultados
    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('final_report.md', 'utf8');
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

    # Upload dos resultados como artefatos
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-analysis-report
        path: |
          final_report.md
          npm_audit.json
          eslint_report.json
          trufflehog_results.json
          build_output.log
        retention-days: 30

    # Upload SARIF para GitHub Security tab (se disponível)
    - name: Upload SARIF file
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif
      continue-on-error: true

    # Falhar o job se houver problemas críticos
    - name: Fail on Critical Issues
      if: steps.consolidate.outputs.status == 'critical'
      run: |
        echo "::error::Critical security issues found. Please review and fix before merging."
        exit 1

    # Warning para problemas de alta prioridade
    - name: Warning on High Priority Issues
      if: steps.consolidate.outputs.status == 'high'
      run: |
        echo "::warning::High priority issues found. Review recommended before merging."

  # Job adicional para verificar o status do workflow
  security-gate:
    name: Security Gate
    needs: security-analysis
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Security Gate Decision
      run: |
        if [ "${{ needs.security-analysis.result }}" = "failure" ]; then
          echo "::error::Security analysis failed. Merge blocked due to critical security issues."
          echo "Please review the security report and address all critical issues before proceeding."
          exit 1
        elif [ "${{ needs.security-analysis.result }}" = "success" ]; then
          echo "::notice::Security analysis passed. Code is ready for merge."
        else
          echo "::warning::Security analysis completed with warnings. Please review the report."
        fi
